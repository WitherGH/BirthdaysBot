# birthdaybot.py
import os, json
import datetime
import random
from datetime import time as dtime
from zoneinfo import ZoneInfo

from google.oauth2 import service_account
from googleapiclient.discovery import build

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

import telegram
print("PTB version:", getattr(telegram, "__version__", "unknown"))

# === ENV ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")                    # -100.... (ID –≥—Ä—É–ø–∏)
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")     # ID –≥—É–≥–ª-—Ç–∞–±–ª–∏—Ü—ñ
RANGE_NAME = "–õ–∏—Å—Ç1!A:C"                         # A: –Ü–º'—è, B: –î–∞—Ç–∞ YYYY-MM-DD, C: –í—ñ—à-–ª—ñ—Å—Ç

# –ö–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å + —á–∞—Å –¥–∑–≤—ñ–Ω–∫–∞
TZ = ZoneInfo("Europe/Kyiv")
NOTIFY_TIME = dtime(hour=9, minute=0, tzinfo=TZ)

# --- Google Sheets auth ---
print("GOOGLE_CREDENTIALS:", os.getenv("GOOGLE_CREDENTIALS") is not None)
google_creds = json.loads(os.getenv("GOOGLE_CREDENTIALS"))
creds = service_account.Credentials.from_service_account_info(
    google_creds,
    scopes=["https://www.googleapis.com/auth/spreadsheets.readonly"]
)
service = build("sheets", "v4", credentials=creds)

MONTHS_UK = [
    "—Å—ñ—á–Ω—è","–ª—é—Ç–æ–≥–æ","–±–µ—Ä–µ–∑–Ω—è","–∫–≤—ñ—Ç–Ω—è","—Ç—Ä–∞–≤–Ω—è","—á–µ—Ä–≤–Ω—è",
    "–ª–∏–ø–Ω—è","—Å–µ—Ä–ø–Ω—è","–≤–µ—Ä–µ—Å–Ω—è","–∂–æ–≤—Ç–Ω—è","–ª–∏—Å—Ç–æ–ø–∞–¥–∞","–≥—Ä—É–¥–Ω—è"
]

def format_date_uk(d: datetime.date) -> str:
    return f"{d.day} {MONTHS_UK[d.month - 1]}"

def next_birthday_date(bday: datetime.date, today: datetime.date) -> datetime.date:
    this_year = bday.replace(year=today.year)
    return this_year if this_year >= today else this_year.replace(year=today.year + 1)

# –®–∞–±–ª–æ–Ω–∏
TEMPLATES_7D = [
    "üì¢ –ß–µ—Ä–µ–∑ —Ç–∏–∂–¥–µ–Ω—å ‚Äî {date} ‚Äî —Å–≤—è—Ç–∫—É—î {name}. –í–∏–ø–æ–≤–Ω–∏—Ç—å—Å—è {age}. –í—ñ—à-–ª—ñ—Å—Ç: {wishlist}\n(—Ç—ñ–ª—å–∫–∏ –Ω—ñ—Ö—Ç–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –±–∞—á–∏–≤ ü§´)",
    "üîî –ó–∞ 7 –¥–Ω—ñ–≤ {name}: {date}. {age} —Ä–æ–∫—ñ–≤. –°–ø–∏—Å–æ–∫ –±–∞–∂–∞–Ω—å: {wishlist}",
    "üóìÔ∏è {date} ‚Äî —É {name} –î–ù! –ü–ª–∞–Ω—É—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è! {age} —Ä–æ–∫—ñ–≤. –í—ñ—à-–ª—ñ—Å—Ç: {wishlist}"
]
TEMPLATES_3D = [
    "‚è≥ –ó–∞–ª–∏—à–∏–ª–æ—Å—å 3 –¥–Ω—ñ: {date} ‚Äî {name}. {age}. –Ü–¥–µ—ó –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤: {wishlist}",
    "üöÄ 3 –¥–Ω—ñ –¥–æ –î–ù {name} ({date}). {age} —Ä–æ–∫—ñ–≤. {wishlist}",
    "üßÅ –£–∂–µ —Å–∫–æ—Ä–æ ‚Äî {date}. {name}, {age} —Ä–æ–∫—ñ–≤. –û—Å—å –≤—ñ—à-–ª—ñ—Å—Ç: {wishlist}"
]
TEMPLATES_0D = [
    "üéÇ –°—å–æ–≥–æ–¥–Ω—ñ ‚Äî {date}. –í—ñ—Ç–∞—î–º–æ {name}! –í–∏–ø–æ–≤–Ω—é—î—Ç—å—Å—è {age}! üéâ –í—ñ—à-–ª—ñ—Å—Ç: {wishlist}",
    "ü•≥ –°—å–æ–≥–æ–¥–Ω—ñ —Å–≤—è—Ç–∫—É—î {name} ({date}) ‚Äî {age}. –¢–µ–ø–ª—ñ —Å–ª–æ–≤–∞ —Ç–∞ –≥—ñ—Ñ–∫–∏ –≤—ñ—Ç–∞—é—Ç—å—Å—è! –í—ñ—à-–ª—ñ—Å—Ç: {wishlist}",
    "üéâ –î–µ–Ω—å –•! {name}, {age} ‚Äî –≤—ñ—Ç–∞—î–º–æ! –í—ñ—à-–ª—ñ—Å—Ç: {wishlist}"
]

def get_birthdays():
    res = service.spreadsheets().values().get(
        spreadsheetId=SPREADSHEET_ID, range=RANGE_NAME
    ).execute()
    return res.get("values", [])

def calculate_age(bday: datetime.date, ref_date: datetime.date) -> int:
    age = ref_date.year - bday.year
    if (ref_date.month, ref_date.day) < (bday.month, bday.day):
        age -= 1
    return age

def parse_row(row):
    name = row[0].strip() if len(row) > 0 else ""
    date_str = row[1].strip() if len(row) > 1 else ""
    wishlist = row[2].strip() if len(row) > 2 and row[2].strip() else "‚ùå –Ω–µ –¥–æ–¥–∞–Ω–æ"
    return name, date_str, wishlist

# --- –©–æ–¥–µ–Ω–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ ---
async def check_and_notify(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.date.today()
    rows = get_birthdays()
    if not rows or len(rows) < 2:
        return

    for row in rows[1:]:
        name, date_str, wishlist = parse_row(row)
        if not name or not date_str:
            continue
        try:
            bday = datetime.datetime.strptime(date_str, "%Y-%m-%d").date()
        except ValueError:
            continue

        d_next = next_birthday_date(bday, today)
        delta = (d_next - today).days
        age = calculate_age(bday, d_next)
        date_txt = format_date_uk(d_next)

        if delta == 7:
            msg = random.choice(TEMPLATES_7D).format(name=name, date=date_txt, age=age, wishlist=wishlist)
            await context.bot.send_message(chat_id=CHAT_ID, text=msg)
        elif delta == 3:
            msg = random.choice(TEMPLATES_3D).format(name=name, date=date_txt, age=age, wishlist=wishlist)
            await context.bot.send_message(chat_id=CHAT_ID, text=msg)
        elif delta == 0:
            msg = random.choice(TEMPLATES_0D).format(name=name, date=date_txt, age=age, wishlist=wishlist)
            await context.bot.send_message(chat_id=CHAT_ID, text=msg)

# --- –ö–æ–º–∞–Ω–¥–∞ /birthdays (—Ç–æ–ø-3) ---
async def birthdays_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.date.today()
    rows = get_birthdays()
    people = []

    if rows and len(rows) > 1:
        for row in rows[1:]:
            name, date_str, wishlist = parse_row(row)
            if not name or not date_str:
                continue
            try:
                bday = datetime.datetime.strptime(date_str, "%Y-%m-%d").date()
            except ValueError:
                continue

            d_next = next_birthday_date(bday, today)
            delta = (d_next - today).days
            age = calculate_age(bday, d_next)
            people.append((delta, name, d_next, age, wishlist))

    if not people:
        await update.message.reply_text("–ù–∞–π–±–ª–∏–∂—á–∏—Ö –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –ø–æ–∫–∏ –Ω–µ –≤–∏–¥–Ω–æ ‚úÖ")
        return

    people.sort(key=lambda x: x[0])
    top = people[:3]

    lines = []
    for i, (_, name, d_next, age, wishlist) in enumerate(top, start=1):
        lines.append(f"{i}) {format_date_uk(d_next)} ‚Äî {name}, –≤–∏–ø–æ–≤–Ω—é—î—Ç—å—Å—è {age}. –í—ñ—à-–ª—ñ—Å—Ç: {wishlist}")

    msg = "üéâ –ù–∞–π–±–ª–∏–∂—á—ñ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (—Ç–æ–ø-3):\n\n" + "\n".join(lines) + "\n\n–¢—ñ–ª—å–∫–∏ –Ω–µ –∑–∞–±—É–¥—å üòâ"
    await update.message.reply_text(msg)

# --- main ---
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("birthdays", birthdays_command))

    # JobQueue (–Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –º–∞—Ç–∏ extras: [webhooks,job-queue] —É requirements.txt)
    if app.job_queue is None:
        raise SystemExit("JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –î–æ–¥–∞–π —É requirements: python-telegram-bot[webhooks,job-queue]==21.6")
    app.job_queue.run_daily(check_and_notify, time=NOTIFY_TIME, name="daily-birthdays")

    # –ó–æ–≤–Ω—ñ—à–Ω—ñ–π URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞
    base_url = (
        os.getenv("PUBLIC_URL")
        or os.getenv("RENDER_EXTERNAL_URL")
        or (f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}" if os.getenv("RENDER_EXTERNAL_HOSTNAME") else None)
    )
    if not base_url:
        raise SystemExit("ERROR: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ URL –¥–ª—è webhook. –î–æ–¥–∞–π PUBLIC_URL (https://<your-service>.onrender.com).")

    # –ó–∞–ø—É—Å–∫ –≤–±—É–¥–æ–≤–∞–Ω–æ–≥–æ Tornado-–≤–µ–±—Å–µ—Ä–≤–µ—Ä–∞ PTB + —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤–µ–±—Ö—É–∫–∞
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 8080)),
        url_path=TELEGRAM_TOKEN,
        webhook_url=f"{base_url}/{TELEGRAM_TOKEN}",
    )

if __name__ == "__main__":
    main()
